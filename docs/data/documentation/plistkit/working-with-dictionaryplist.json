{"seeAlsoSections":[{"title":"Guides","identifiers":["doc:\/\/PListKit\/documentation\/PListKit\/Property-List-Value-Types","doc:\/\/PListKit\/documentation\/PListKit\/Create-a-new-plist","doc:\/\/PListKit\/documentation\/PListKit\/Load-a-plist-file-from-disk","doc:\/\/PListKit\/documentation\/PListKit\/Working-with-Non-Dictionary-plists","doc:\/\/PListKit\/documentation\/PListKit\/Property-List-Formats"],"generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dictionary-rooted plists are the most common structure for plist files. This guide will give an overview of methods offered specifically on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PListKit\/documentation\/PListKit\/DictionaryPList"},{"type":"text","text":" which give useful functional API to read and write from nested dictionaries."}]},{"anchor":"ReadWrite-Keys","level":2,"type":"heading","text":"Read\/Write Keys"},{"type":"codeListing","syntax":"swift","code":["\/\/ can create intermediate dictionaries if nonexistent","plist.createIntermediateDictionaries = true \/\/ (note: defaults to true)","","\/\/ create a new Int key within nested dictionaries","plist.root","    .dict(key: \"Dict\")","    .dict(key: \"Nested Dict\")","    .int(key: \"Int\")","    .value = 123","","\/\/ read the value back","let val = plist.root","    .dict(key: \"Dict\")","    .dict(key: \"Nested Dict\")","    .int(key: \"Int\")","    .value  \/\/ == Optional(123)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All valid property list value types map transparently to native Swift value types."}]},{"type":"codeListing","syntax":"swift","code":["plist.root.any(key: \"Any\").value = \"a new string\" \/\/ value of any valid PListValue type","plist.root.string(key: \"String\").value = \"a new string\"","plist.root.int(key: \"Int\").value = 123","plist.root.double(key: \"Double\").value = 123.45","plist.root.bool(key: \"Bool\").value = true","plist.root.date(key: \"Date\").value = Date()","plist.root.data(key: \"Data\").value = Data([0x01, 0x02])","plist.root.array(key: \"Array\").value = [","    \"a string\",","    123, ","    123.45,","    true, ","    Date(), ","    Data([0x01, 0x02])","]","","\/\/ dictionaries can be modified directly if necessary,","\/\/ perhaps if you need to populate a large data set or copy a nested structure.","\/\/ but otherwise it's much nicer to use the discretely typed methods above","plist.root.dict(key: \"Dictionary\").value = [","    \"Key 1\" : \"a string\",","    \"Key 2\" : 123","]"]},{"anchor":"Manipulating-Array-Elements-Directly","level":2,"type":"heading","text":"Manipulating Array Elements Directly"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Arrays can, of course, be modified in-place using native Swift subscripts."}]},{"type":"codeListing","syntax":"swift","code":["plist.root.array(key: \"Array\").value?[0] = \"replaced string value\"","plist.root.array(key: \"Array\").value?.append(\"new string value\")"]},{"anchor":"Reading-Arrays","level":2,"type":"heading","text":"Reading Arrays"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since property list arrays can contain any valid plist value type simultaneously, when reading arrays you need to conditionally cast values to test their type."}]},{"type":"codeListing","syntax":"swift","code":["let array = plist.root.array(key: \"Array\").value ?? [] \/\/ PListArray, aka [PListValue]","","for element in array {","    switch element {","    case let val as String:           print(\"String: \\(val)\")","    case let val as Int:              print(\"Int: \\(val)\")","    case let val as Double:           print(\"Double: \\(val)\")","    case let val as Bool:             print(\"Bool: \\(val)\")","    case let val as Date:             print(\"Date: \\(val)\")","    case let val as Data:             print(\"Data with \\(val.count) bytes\")","    case let val as PListArray:       print(\"Array with \\(val.count) elements\")","    case let val as PListDictionary:  print(\"Dictionary with \\(val.count) elements\")","    default: break","    }","}"]},{"anchor":"Deleting-Keys","level":2,"type":"heading","text":"Deleting Keys"},{"type":"codeListing","syntax":"swift","code":["\/\/ delete a key","plist.root.string(key: \"String\").value = nil","","\/\/ delete a dictionary or array and all of its contents","plist.root.array(key: \"Array\").value = nil","plist.root.dict(key: \"Dict\").value = nil"]},{"anchor":"Subscripts","level":2,"type":"heading","text":"Subscripts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A full set of chainable subscripts are also available if you choose to use them, mirroring the functional methods. To use them, reference the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PListKit\/documentation\/PListKit\/PListProtocol\/storage"},{"type":"text","text":" property directly instead of "},{"type":"codeVoice","code":"root"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["plist.storage[any: \"Keyname\"] \/\/ reads key value as any PListValue","","plist.storage[string: \"Keyname\"]","plist.storage[int: \"Keyname\"]","plist.storage[double: \"Keyname\"]","plist.storage[bool: \"Keyname\"]","plist.storage[date: \"Keyname\"]","plist.storage[data: \"Keyname\"]","plist.storage[array: \"Keyname\"]","plist.storage[dict: \"Keyname\"]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The subscripts are usable to both get and set."}]},{"type":"codeListing","syntax":"swift","code":["plist.storage[string: \"Keyname\"] = \"string value\"","let str = plist.storage[string: \"Keyname\"] ?? \"\" \/\/ \"string value\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Nested dictionaries can easily be accessed through chaining subscripts."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ sets nested string key if the intermediate dictionaries already exist","plist.storage[dict: \"Dict\"]?[dict: \"Nested Dict\"]?[string: \"Keyname\"] = \"string value\"","","\/\/ alternative subscript creates nested dictionaries if they don't exist","plist.storage[dictCreate: \"Dict\"]?[dictCreate: \"Nested Dict\"]?[string: \"Keyname\"] = \"string value\"","","\/\/ subscript bodies may be on new lines in the event of very long subscript chains","plist.storage[","    dictCreate: \"Dict\"","]?[","    dictCreate: \"Nested Dict\"","]?[","    string: \"Keyname\"","] = \"string value\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Arrays can be read by index, conditionally casting to a strong type in process:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ safely attempt to read indexes","\/\/ if index does not exist, returns nil","\/\/ if index exists but is of wrong type, returns nil","plist.storage[array: \"Array\"]?[any: 0]    \/\/ read index 0 as PListValue; must cast it yourself","plist.storage[array: \"Array\"]?[string: 0] \/\/ read index 0 as? String","plist.storage[array: \"Array\"]?[int: 0]    \/\/ read index 0 as? Int","plist.storage[array: \"Array\"]?[double: 0] \/\/ read index 0 as? Double","plist.storage[array: \"Array\"]?[bool: 0]   \/\/ read index 0 as? Bool","plist.storage[array: \"Array\"]?[date: 0]   \/\/ read index 0 as? Date","plist.storage[array: \"Array\"]?[data: 0]   \/\/ read index 0 as? PList.PListArray","plist.storage[array: \"Array\"]?[dict: 0]   \/\/ read index 0 as? PList.PListDictionary"]}]}],"variants":[{"paths":["\/documentation\/plistkit\/working-with-dictionaryplist"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/PListKit\/documentation\/PListKit\/Working-with-DictionaryPList","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"An overview of working with Dictionary-rooted plists."}],"kind":"article","metadata":{"modules":[{"name":"PListKit"}],"role":"collectionGroup","title":"Working with DictionaryPList"},"hierarchy":{"paths":[["doc:\/\/PListKit\/documentation\/PListKit"]]},"topicSections":[{"title":"Type Alias","identifiers":["doc:\/\/PListKit\/documentation\/PListKit\/DictionaryPList"]}],"references":{"doc://PListKit/documentation/PListKit/PListProtocol/storage":{"role":"symbol","title":"storage","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"storage"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Root"}],"abstract":[{"type":"text","text":"Root strongly-typed storage backing for the plist."}],"identifier":"doc:\/\/PListKit\/documentation\/PListKit\/PListProtocol\/storage","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/plistkit\/plistprotocol\/storage"},"doc://PListKit/documentation/PListKit/PListDictionary":{"role":"symbol","title":"PListDictionary","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"PListDictionary"}],"abstract":[{"type":"text","text":"Strongly-typed Dictionary type used by "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PListKit\/documentation\/PListKit\/PList"},{"type":"text","text":"."}],"identifier":"doc:\/\/PListKit\/documentation\/PListKit\/PListDictionary","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PListDictionary"}],"url":"\/documentation\/plistkit\/plistdictionary"},"doc://PListKit/documentation/PListKit/DictionaryPList":{"role":"symbol","title":"DictionaryPList","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"DictionaryPList"}],"abstract":[{"type":"text","text":"Class representing a Property List (plist) with a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/PListKit\/documentation\/PListKit\/PListDictionary"},{"type":"text","text":" root."},{"type":"text","text":" "},{"type":"text","text":"This is the most common plist root layout and provides the most amount of useful abstractions of all plist classes in PListKit."}],"identifier":"doc:\/\/PListKit\/documentation\/PListKit\/DictionaryPList","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DictionaryPList"}],"url":"\/documentation\/plistkit\/dictionaryplist"},"doc://PListKit/documentation/PListKit":{"role":"collection","title":"PListKit","abstract":[{"type":"text","text":"A multiplatform Swift library bringing functional methods and type safety to .plist (Property List) files."}],"identifier":"doc:\/\/PListKit\/documentation\/PListKit","kind":"symbol","type":"topic","url":"\/documentation\/plistkit"},"doc://PListKit/documentation/PListKit/Property-List-Value-Types":{"role":"collectionGroup","title":"Property List Value Types","abstract":[{"type":"text","text":"Valid property list value types."}],"identifier":"doc:\/\/PListKit\/documentation\/PListKit\/Property-List-Value-Types","kind":"article","type":"topic","url":"\/documentation\/plistkit\/property-list-value-types"},"doc://PListKit/documentation/PListKit/Load-a-plist-file-from-disk":{"role":"collectionGroup","title":"Load a plist File From Disk","abstract":[{"type":"text","text":"Methods to load a .plist file from disk or from raw .plist file data."}],"identifier":"doc:\/\/PListKit\/documentation\/PListKit\/Load-a-plist-file-from-disk","kind":"article","type":"topic","url":"\/documentation\/plistkit\/load-a-plist-file-from-disk"},"doc://PListKit/documentation/PListKit/Working-with-Non-Dictionary-plists":{"role":"collectionGroup","title":"Working with Non-Dictionary plists","abstract":[],"identifier":"doc:\/\/PListKit\/documentation\/PListKit\/Working-with-Non-Dictionary-plists","kind":"article","type":"topic","url":"\/documentation\/plistkit\/working-with-non-dictionary-plists"},"doc://PListKit/documentation/PListKit/Property-List-Formats":{"role":"collectionGroup","title":"Property List Formats","abstract":[{"type":"text","text":"Property list files can be encoded in different data formats."}],"identifier":"doc:\/\/PListKit\/documentation\/PListKit\/Property-List-Formats","kind":"article","type":"topic","url":"\/documentation\/plistkit\/property-list-formats"},"doc://PListKit/documentation/PListKit/Create-a-new-plist":{"role":"collectionGroup","title":"Create a New plist","abstract":[{"type":"text","text":"How to create a new empty plist object."}],"identifier":"doc:\/\/PListKit\/documentation\/PListKit\/Create-a-new-plist","kind":"article","type":"topic","url":"\/documentation\/plistkit\/create-a-new-plist"}}}